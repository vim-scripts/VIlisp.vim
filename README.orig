From: Larry Clapp <larry@theclapp.org>
Newsgroups: comp.lang.lisp
Subject: Lisp with Vim
Date: 15 Feb 2002 05:31:25 GMT


Hi, all,

With his voluminous interview on /., Kent Pitman inspired me to check out
Lisp.  I've seen it before (in Hofstadter's Metamagical Themas and other
places), and even wrote a small Lisp interpreter in Turbo Pascal (v4) while in
high school (which helped immensely with my understanding of recursion &
linked lists, as you might imagine :).

However, Kent didn't quite inspire me to learn Emacs.  I fiddled with it, and
purchased _Learning GNU Emacs_, so I can figure it out if I absolutely must,
but I've been a vi/Vim user since I discovered Unix, and I figured I could
skip Emacs if I could figure out how to get Vim to talk to Lisp.  I've
implemented the absolute basics -- sending an expression from the editor to
the interpreter -- and hope to do more, as time goes by.  (For you Emacs fans:
I know that Emacs/Ilisp does a lot more than this; I'm sure it's the height of
hubris for me to consider duplicating it.  :)

I've enclosed VIlisp.vim, which defines functions and key mappings to send
Lisp code to a CMU CL process running in a seperate terminal window, via
funnel.pl.  I've also enclosed funnel.pl (oddly enough :), a Perl script which
accepts input both from Vim (via a fifo, which it creates) and from its own
terminal window (via GNU ReadLine), and sends it to CMU CL, and prints the
output (via "print" :).

Put this at an appropriate place in your ~/.vimrc:

    autocmd BufRead *.lsp,*.lisp so ~/path/to/VIlisp.vim

In an Xterm, run

    export PERL_RL=gnu			# use GNU readline in funnel
    funnel.pl $HOME/.lisp-pipe lisp

In a different xterm, run e.g.

    vim test.lisp

Put the cursor in a Lisp expression.  Type ,es to _e_valuate the
_s_-expression.  Type ,ec to _e_valuate the _c_urrent expression.  Example:

    (defun fib (n)
      (cond ((or (= n 0)
		 (= n 1)) 1)
	    (t (+ (fib (- n 1))
	    ;      ^ cursor here
		  (fib (- n 2))))))

With the cursor at the indicated spot, ",es" will eval the entire defun, and
",ec" will evaluate "(fib (- n 1))".

See VIlisp.vim for other mappings, or to change the current ones.  (I could
see using ,et (Evaluate Toplevel) instead of ,es, and ,ee (Evaluate
Expression) instead of ,ec.  To each his own.)

I expect I'll keep working on this -- functionality is still pretty minimal
(adding folding would be nice), and the code isn't all that clean, either.
Feel free to e-mail me if you have any questions, comments, suggestions, or
(be still my heart :) patches.

I use: Vim v6.0.93, CMU Common Lisp x86-linux 3.0.8 18c+, and Perl 5.6.1.
funnel.pl requires Perl modules IO::Pty, Term::ReadLine, and probably
Term::ReadLine::Gnu.  Developed on Debian "woody" GNU/Linux, kernel 2.4.17.
YMMV.

funnel.pl would probably work with any Lisp that will run in an xterm; just
change how it exits Lisp; CMU CL uses "(quit)".

-- Larry Clapp


p.s.  Attachments follow.  Sorry they're not "real" attachments; I can't
figure out how to do MIME in slrn.  I Read (some of) The Fine Manual, but only
saw how to read MIME messages, not post them.  Bummer.

[ scripts deleted ]

